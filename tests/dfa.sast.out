
fun Int main() {
Edge<String->*> aEdge;
Node<Int> (Node<Int> : start = (Node<Int> : '(Int : 0)'));
Node<Int> (Node<Int> : state1 = (Node<Int> : '(Int : 0)'));
Node<Int> (Node<Int> : accept = (Node<Int> : '(Int : 1)'));
String (String : input = (String : babbobababboba));
Graph<Node<Int>, Edge<String->Int>> (Graph<Node<Int>, Edge<String->Int>> : dfa = (Graph<Node<Int>, Edge<String->*>> : <(Node<Int> : start) (Edge<String->*> : -(String : b)-) (Node<Int> : state1) (Edge<String->*> : -(String : o)-) (Node<Int> : '(Int : 0)') (Edge<String->*> : -(String : b)-) (Node<Int> : '(Int : 0)') (Edge<String->*> : -(String : a)-) (Node<Int> : accept) (Void : ), (Node<Int> : state1) (Edge<String->*> : -(String : a)-) (Node<Int> : '(Int : 0)') (Edge<String->*> : -(String : b)-) (Node<Int> : accept) (Edge<String->*> : -(String : b)-) (Node<Int> : state1) (Void : )>));
Int (Int : token = (Int : 0));
Int (Int : i = (Int : 0));
Bool (Bool : found = (Bool : false));
String character;
List<Edge<String->*>> transitions;
Node<Int> (Node<Int> : state = (Node<Int> : start));
while ((Bool : (Int : token) < (Int : size((String : input))))) {
(String : character = (String : (String : input)[(Int : token)]));
(List<Edge<String->Int>> : transitions = (List<Edge<String->Int>> : (Graph<Node<Int>, Edge<String->Int>> : dfa)outgoing((Node<Int> : state))));
(Int : i = (Int : 0));
while ((Bool : (Bool : (Int : i) < (Int : size((List<Edge<String->*>> : transitions)))) and (Bool : (Bool : found) == (Bool : false)))) {
if ((Bool : (String : (Edge<String->*> : (List<Edge<String->*>> : transitions)[(Int : i)]).val) == (String : character)))
{
(Node<*> : state = (Node<*> : (Edge<String->*> : (List<Edge<String->*>> : transitions)[(Int : i)]).to));
(Bool : found = (Bool : true));
}
(Int : i = (Int : (Int : i) + (Int : 1)));
}
if ((Bool : (Bool : found) == (Bool : false)))
{
(* : print((String : REJECT)));
return (Int : 0);
}
(Bool : found = (Bool : false));
(Int : token = (Int : (Int : token) + (Int : 1)));
}
if ((Bool : (Int : (Node<Int> : state).val) == (Int : 1)))
{
(* : print((String : ACCEPT)));
}
else
{
(* : print((String : REJECT)));
}
return (Int : 0);
}
