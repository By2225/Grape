fun Int main() {

    Edge<String> aEdge;

    Node<Int> start = '0';

    String input = "bbbbbbbbbbb";
    Graph<Int, String> dfa = << start  -"b"-  '1'  -"b"-  '0'  -"b"-  '1' >>;
    Int token = 0;
    Int i = 0;
    Bool found = No;

    String character;
    List<Edge<String> > transitions;

    Node<Int> state = start;
    while( token < size(input)) { 			// String size

	character = input[token];		        // Get char at token
        transitions = dfa.outgoing(state); 	        // Get outgoing edges

	i = 0;
	while ((i < size(transitions)) and (found == No)) { 			// List size
	    if (transitions[i].val == character) { 	// Get list string
		state = transitions[i].to;		// Get edge destination
                found = Yes;
	    }

	    i = i + 1;
	}
        if ( found == No){
            print("REJECT");
            return 0;
        }
        found = No;
	token = token + 1;
    }

    if (state.val == 1) {		// Get accepting
        print("ACCEPT");
    } else {
        print("REJECT");
    }

    return 0;
}
