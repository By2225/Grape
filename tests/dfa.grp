fun Int main() {

    Edge<String> aEdge;
    List<Edge<String> > transitions;

    Int i;

    Int token;
    String input;
    String character;
    Bool found;

    Node<Int> start;
    Node<Int> state;
    Graph<Int, String> dfa;

    start = '0';
    input = "bbbbbbbbbbb";
    dfa = << start  -"b"-  '1'  -"b"-  '0'  -"b"-  '1' >>;
    token = 0;
    found = False;

    state = start;
    while( token < str_size(input)) { 			// String size

	character = get_char(input, token);		// Get char at token
	transitions = get_outgoing(state); 			// Get outgoing edges

	

	i = 0;
	while((i < size(transitions)) and (found == False)) { 			// List size
	    aEdge = transitions[i]; 	// Get list item
	    if (str_equal(edge_get_str(aEdge), character)) { 	// Get list string
		state = get_to(aEdge);			// Get edge destination
                found = True;
	    }
	    i = i + 1;
	}
        if( found == False){
            prints("REJECT");
            return 0;
        }
        found = False;
	token = token + 1;
    }

    if (node_get_int(state) == 1) {		// Get accepting
        prints("ACCEPT");
    } else {
        prints("REJECT");
    }

    return 0;
}
