
fun Int main() {
Edge<String->*> aEdge;
Node<Int> start = '0';
Node<Int> state1 = '0';
Node<Int> accept = '1';
String input = "babbobababboba";
Graph<Node<Int>, Edge<String->Int>> dfa = <<start -"b"- state1 -"o"- '0' -"b"- '0' -"a"- accept , state1 -"a"- '0' -"b"- accept -"b"- state1 >>;
Int token = 0;
Int i = 0;
Bool found = false;
String character;
List<Edge<String->*>> transitions;
Node<Int> state = start;
while (token < size(input)) {
character = input[token];
transitions = dfaoutgoing(state);
i = 0;
while (i < size(transitions) and found == false) {
if (transitions[i].val == character)
{
state = transitions[i].to;
found = true;
}
i = i + 1;
}
if (found == false)
{
print("REJECT");
return 0;
}
found = false;
token = token + 1;
}
if (state.val == 1)
{
print("ACCEPT");
}
else
{
print("REJECT");
}
return 0;
}
