
fun Int main() {
Edge<String> aEdge;
Node<Int> start = '0';
String input = "bbbbbbbbbbb";
Graph<Node<Int>, Edge<String>> dfa = <<start -"b"- '1' -"b"- '0' -"b"- '1' >>;
Int token = 0;
Int i = 0;
Bool found = false;
String character;
List<Edge<String>> transitions;
Node<Int> state = start;
while (token < str_size(input)) {
character = get_char(token, input);
transitions = get_outgoing(state);
i = 0;
while (i < size(transitions) and found == false) {
aEdge = transitions[i];
if (str_equal(character, aEdge.val))
{
state = get_to(aEdge);
found = true;
}
i = i + 1;
}
if (found == false)
{
prints("REJECT");
return 0;
}
found = false;
token = token + 1;
}
if (state.val == 1)
{
prints("ACCEPT");
}
else
{
prints("REJECT");
}
return 0;
}
