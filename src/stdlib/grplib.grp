fun Bool dfa(Graph<Bool, String> dfa, Node<Bool> start, String input) {

    Int i = 0;
    Int token = 0;

    String character;

    Bool found = No;
    Edge<String> aEdge;

    Node<Bool> state = start;

    List<Edge<String> > transitions;

    while(token < str_size(input)) {

	character = input[token];
        transitions = dfa.outgoing(state);

	i = 0;
	while ((i < size(transitions)) and (not found)) {
	    if (transitions[i].val == character) {
		state = transitions[i].to;
                found = Yes;
	    }
	    i = i + 1;
	}
        if (not found) {
            return No;
        }

        found = No;
	token = token + 1;
    }

    return state.val;
}
