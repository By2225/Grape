fun minDistance graph {
    minValue = INF
    min:Node

    // Property satisfaction
    for `a:*` in graph {
        if (a.dist < minValue && a.visited == false) {
            minValue = a.dist
            min = a 
        }
    }

    return min
}

dijkstra graph start {

    for `a:*` in graph {
        a.dist = INF
        a.prev = null
    }

    // Every node in graph
    for `*` in graph { 

        current = minDistance graph

        for `current -a- b` in graph {

            newDist = current.dist + a

            if newDist < b.dist { 
                b.dist = newDist
                b.prev = current
            }     
        }

        current.visited = true
    } 
}

a,b,c,d,e,f,g,h:Node<Dict>

myGraph = [
    a -6- b,
    a -1- c -2- d -1- e -1- f, 
    c -4- g -1- d,
    d -1- f,
    e -2- h 
]

dijkstra myGraph a










b:Edge<Int>

llGraph:<(a) -- (b) -- (c) -- (d)>

graph:<
    (a:[flavor="CHOCOLATE"]),
    (b),
    (c:[buddy=a]),
    (d),
    (e),
    a -5- b, 
    b -10- c,
    d -10- c -10- e
> 

(a)
(b)
<a -c- b>

for a -- (b) {

}

for a -- (b) {
    
}

(a) -10- (b) in graph
=> [b -- c, d -- c, c -- e]

